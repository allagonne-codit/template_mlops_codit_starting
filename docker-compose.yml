services:
  # MLflow service
  mlflow:
    image: mlflow-server
    build:
      context: .
      dockerfile: docker/mlflow/Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - mlflow_data:/mlruns
      - mlflow_db:/mlflow/db
    environment:
      - BACKEND_STORE_URI=/mlruns
      - ARTIFACT_ROOT=/mlruns
    user: "${AIRFLOW_UID:-50000}:0"
    networks:
      - airflow_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models
    depends_on:
      - mlflow
    networks:
      - airflow_network

  # Airflow initialization
  airflow-init:
    build:
      context: .
      dockerfile: docker/airflow/Dockerfile
    user: root
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /opt/airflow/db /opt/airflow/data/raw /opt/airflow/models &&
        chown -R airflow:root /opt/airflow &&
        chmod -R 777 /opt/airflow &&
        gosu airflow airflow db init &&
        gosu airflow airflow users create \
          --username admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com \
          --password admin
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/db/airflow.db
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
      - PYTHONPATH=/opt/airflow:/opt/airflow/dags:/app:/app/src
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow_db:/opt/airflow/db
      - ./src:/app/src
      - ./data:/opt/airflow/data
      - ./models:/opt/airflow/models
    networks:
      - airflow_network

  # Airflow webserver
  airflow-webserver:
    build:
      context: .
      dockerfile: docker/airflow/Dockerfile
    user: "${AIRFLOW_UID:-50000}:0"
    command: webserver
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/db/airflow.db
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
      - AIRFLOW__WEBSERVER__SECRET_KEY=your_secret_key
      - PYTHONPATH=/opt/airflow:/opt/airflow/dags:/app:/app/src
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - airflow_db:/opt/airflow/db
      - ./src:/app/src
      - ./data:/opt/airflow/data
      - ./models:/opt/airflow/models
      - mlflow_data:/mlruns
    depends_on:
      mlflow:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow_network

  # Airflow scheduler
  airflow-scheduler:
    build:
      context: .
      dockerfile: docker/airflow/Dockerfile
    user: "${AIRFLOW_UID:-50000}:0"
    command: scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/db/airflow.db
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
      - PYTHONPATH=/opt/airflow:/opt/airflow/dags:/app:/app/src
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - airflow_db:/opt/airflow/db
      - ./src:/app/src
      - ./data:/opt/airflow/data
      - ./models:/opt/airflow/models
      - mlflow_data:/mlruns
    depends_on:
      mlflow:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow_network

volumes:
  airflow_db:
    driver: local
  mlflow_data:
    driver: local
  mlflow_db:
    driver: local

networks:
  airflow_network:
    driver: bridge